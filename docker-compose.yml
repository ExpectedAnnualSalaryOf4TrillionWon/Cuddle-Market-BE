services:
  django:
    image: ${DJANGO_IMAGE}
    container_name: django
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.dev
    volumes:
      - static-:/app/staticfiles
    networks:
      - app_network
    expose:
      - "8000"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "manage.py", "check", "--database", "default"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  redis:
    image: redis:7-alpine # 특정 버전 명시
    container_name: redis
    restart: unless-stopped
    volumes:
      - redis-data:/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: ${NGINX_IMAGE}
    container_name: nginx
    restart: unless-stopped
    depends_on:
      django:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static-:/app/staticfiles:ro   # 정적 파일은 읽기 전용(ro)으로 마운트
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
      - SSL_CERT_DOMAIN=${SSL_CERT_DOMAIN}
    networks:
      - app_network
    command: nginx -g 'daemon off;' # Nginx 실행만 담당

  certbot:
    image: certbot/certbot
    container_name: certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  static-:
  redis-data:

networks:
  app_network:
    driver: bridge